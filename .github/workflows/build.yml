name: Build OnePlus SM6375 Kernel with GCC 9.3 (64-bit only toolchain)

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main # Or your default branch where this workflow file resides
    paths:
      - '.github/workflows/build.yml' # Rebuild if workflow changes

jobs:
  build_kernel:
    name: Build Kernel with GCC 9.3
    runs-on: ubuntu-latest
    permissions:
      contents: write # To allow creating releases or pushing artifacts (optional)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          set -ex
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ccache curl flex \
            git imagemagick libncurses5-dev libssl-dev \
            make rsync unzip wget zip kmod \
            software-properties-common

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      - name: Prepare Toolchain and Sources
        run: |
          set -ex
          mkdir -p "${HOME}/toolchains"
          export KERNEL_DIR="${PWD}/kernel_source"
          export ANYKERNEL_DIR="${PWD}/anykernel3"
          export GCC64_TOOLCHAIN_DIR="${HOME}/toolchains/gcc-aarch64-toolchain-9.3" # Slightly changed name for clarity

          echo "KERNEL_DIR=${KERNEL_DIR}" >> $GITHUB_ENV
          echo "ANYKERNEL_DIR=${ANYKERNEL_DIR}" >> $GITHUB_ENV
          echo "GCC64_TOOLCHAIN_DIR=${GCC64_TOOLCHAIN_DIR}" >> $GITHUB_ENV

          echo "Cloning Kernel Source..."
          git clone --depth=1 -b lineage-22.2 https://github.com/Teamhackneyed/android_kernel_oneplus_sm6375 "${KERNEL_DIR}"

          echo "Cloning AnyKernel3..."
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git "${ANYKERNEL_DIR}"

          echo "Cloning GCC aarch64 9.3 toolchain into ${GCC64_TOOLCHAIN_DIR}..."
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-gnu-9.3.git "${GCC64_TOOLCHAIN_DIR}"
          
          echo "--- Debugging Toolchain Path ---"
          echo "Listing contents of ${GCC64_TOOLCHAIN_DIR}:"
          ls -lA "${GCC64_TOOLCHAIN_DIR}"
          echo "Listing contents of ${GCC64_TOOLCHAIN_DIR}/bin (if it exists):"
          if [ -d "${GCC64_TOOLCHAIN_DIR}/bin" ]; then
            ls -lA "${GCC64_TOOLCHAIN_DIR}/bin"
          else
            echo "${GCC64_TOOLCHAIN_DIR}/bin directory NOT FOUND."
          fi
          echo "--- End Debugging Toolchain Path ---"

          # Add toolchain's bin directory to PATH for general access
          echo "${GCC64_TOOLCHAIN_DIR}/bin" >> $GITHUB_PATH

      - name: Compile Kernel
        run: |
          set -ex
          cd "${KERNEL_DIR}"
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="YourGitHubUsername" # Change this
          export KBUILD_BUILD_HOST="GitHubActions"
          export DEFCONFIG=gki_defconfig
          export KERNEL_IMAGE_NAME=Image

          echo "GCC64_TOOLCHAIN_DIR is: ${GCC64_TOOLCHAIN_DIR}"
          if [ -z "${GCC64_TOOLCHAIN_DIR}" ]; then
            echo "Error: GCC64_TOOLCHAIN_DIR is not set!"
            exit 1
          fi

          export CROSS_COMPILE="${GCC64_TOOLCHAIN_DIR}/bin/aarch64-linux-"
          echo "CROSS_COMPILE is set to: ${CROSS_COMPILE}"

          echo "Attempting to get GCC version using CROSS_COMPILE prefix:"
          if ! "${CROSS_COMPILE}gcc" --version; then
            echo "Error: Failed to execute ${CROSS_COMPILE}gcc --version"
            echo "Checking if the path ${GCC64_TOOLCHAIN_DIR}/bin/aarch64-linux-gcc exists and is executable:"
            ls -l "${GCC64_TOOLCHAIN_DIR}/bin/aarch64-linux-gcc" || echo "File ${GCC64_TOOLCHAIN_DIR}/bin/aarch64-linux-gcc not found or no permission."
            exit 1
          fi
          
          export KBUILD_COMPILER_STRING="$(${CROSS_COMPILE}gcc --version | head -n 1)"
          echo "KBUILD_COMPILER_STRING is: ${KBUILD_COMPILER_STRING}"

          # Add KBUILD_CFLAGS to disable treating format warnings as errors
          export KCFLAGS="-Wno-error=format-security -Wno-error=format"

          echo "Starting kernel defconfig..."
          make -j$(nproc --all) O=out \
            ARCH=${ARCH} \
            SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            KCFLAGS="${KCFLAGS}" \
            ${DEFCONFIG}

          echo "Starting kernel compilation..."
          make -j$(nproc --all) O=out \
            ARCH=${ARCH} \
            SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            KCFLAGS="${KCFLAGS}"

          echo "Kernel compilation finished."
          ls -lh "${KERNEL_DIR}/out/arch/arm64/boot/"
          
      - name: Package with AnyKernel3
        run: |
          set -ex
          cd "${ANYKERNEL_DIR}"
          export KERNEL_IMAGE_PATH="${KERNEL_DIR}/out/arch/arm64/boot/Image"

          if [ ! -f "${KERNEL_IMAGE_PATH}" ]; then
            echo "Kernel image not found at ${KERNEL_IMAGE_PATH}!"
            exit 1
          fi
          cp "${KERNEL_IMAGE_PATH}" .
          export ZIP_NAME="SM6375_Kernel_GCC9_$(date +%Y%m%d-%H%M).zip"
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
          zip -r9 "${ZIP_NAME}" * -x ".git*" "*placeholder" "LICENSE" "README.md"
          echo "Flashable ZIP created: ${ZIP_NAME}"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ANYKERNEL_DIR }}/${{ env.ZIP_NAME }}

      - name: Upload Kernel Image (for debugging)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_Image_GCC9
          path: ${{ env.KERNEL_DIR }}/out/arch/arm64/boot/Image
