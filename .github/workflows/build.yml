name: Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call:
    inputs:
      model:
        required: true
        type: string
      soc:
        required: true
        type: string
      branch:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      ksun_branch:
        required: true
        type: string
        default: stable

  workflow_dispatch:
    inputs:
      model:
        description: 'Device model codename (e.g., larry, OPAce5Pro)'
        required: true
        type: string
        default: 'larry'
      soc:
        description: 'SoC codename (e.g., sm6375, sun)'
        required: true
        type: string
        default: 'sm6375'
      branch:
        description: 'Kernel source branch (e.g., thirteen, fourteen-ksu)'
        required: true
        type: string
      android_version:
        description: 'Android version (e.g., 13, 14)'
        required: true
        type: string
      kernel_version:
        description: 'Kernel version (e.g., 5.10, 5.15)' # SM6375 is often 5.10
        required: true
        type: string
      ksun_branch:
        description: 'KernelSU branch (e.g., stable, next)'
        required: true
        type: string
        default: stable

jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-latest

    steps:
      - name: Setup System
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          sudo apt-get update
          # Remove large unwanted packages first
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org microsoft-edge-stable || true
          
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"

          # Install essential build dependencies
          sudo apt-get install -y \
            git curl ccache python3 python-is-python3 tree \
            build-essential bc libssl-dev libelf-dev \
            bison flex rsync libncurses-dev \
            zip unzip tar gzip bzip2 lzop
          echo "Essential build dependencies installed."
          df -h

      - name: Install Repo
        run: |
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Set CONFIG_VAR_NAME Environment Variable
        run: |
          CONFIG_VAR_NAME="${{ inputs.model }}"
          echo "CONFIG_VAR_NAME=$CONFIG_VAR_NAME" >> $GITHUB_ENV
          echo "CONFIG_VAR_NAME (model) set to: $CONFIG_VAR_NAME"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies into $GITHUB_WORKSPACE..."
          ANYKERNEL_BRANCH="gki" 
          SUSFS_BRANCH="kernel-5.4"
          
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH" AnyKernel3
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH" susfs4ksu
          git clone https://github.com/TheWildJames/kernel_patches.git kernel_patches
          echo "Listing $GITHUB_WORKSPACE after cloning dependencies:"
          ls -alh "$GITHUB_WORKSPACE"

      - name: Clone Kernel Source
        run: |
          KERNEL_SOURCE_DIR_NAME="android_kernel_oneplus_sm6375"
          KERNEL_PARENT_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG_VAR_NAME }}"

          echo "Creating folder for kernel source: $KERNEL_PARENT_DIR/$KERNEL_SOURCE_DIR_NAME..."
          mkdir -p "$KERNEL_PARENT_DIR"
          cd "$KERNEL_PARENT_DIR"
          
          echo "Cloning kernel source for SM6375 into $(pwd)/$KERNEL_SOURCE_DIR_NAME..."
          git clone https://github.com/Teamhackneyed/android_kernel_oneplus_sm6375.git -b "${{ inputs.branch }}" "$KERNEL_SOURCE_DIR_NAME" --depth=1
          
          echo "KERNEL_DIR=$KERNEL_PARENT_DIR/$KERNEL_SOURCE_DIR_NAME" >> $GITHUB_ENV
          echo "Kernel source cloned into $KERNEL_PARENT_DIR/$KERNEL_SOURCE_DIR_NAME"

      - name: List Kernel Source Contents
        run: |
          echo "Listing contents of ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"
          
          echo "--- Top Level Contents ---"
          ls -alh
          echo "--- Contents of ./oplus/ ---"
          if [ -d "./oplus" ]; then ls -alh ./oplus; else echo "./oplus directory not found."; fi
          echo "--- Contents of ./oplus/build/ ---"
          if [ -d "./oplus/build" ]; then ls -alh ./oplus/build; else echo "./oplus/build directory not found."; fi
          echo "--- Looking for build_with_bazel.py ---"
          if [ -f "./build_with_bazel.py" ]; then echo "Found: ./build_with_bazel.py"; else echo "./build_with_bazel.py not found."; fi
          echo "--- Checking for defconfig: arch/arm64/configs/gki_defconfig ---"
          if [ -f "./arch/arm64/configs/gki_defconfig" ]; then echo "Found: ./arch/arm64/configs/gki_defconfig"; else echo "./arch/arm64/configs/gki_defconfig not found."; fi

      - name: Add KernelSU Next
        run: |
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"
          
          echo "Adding KernelSU Next (branch: ${{ inputs.ksun_branch }})..."
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi
          git submodule update --init --recursive

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"
          
          echo "Applying SUSFS patches for kernel version ${{ inputs.kernel_version }}..."
          if [ ! -f "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/50_add_susfs_in_kernel-${{ inputs.kernel_version }}.patch" ]; then
            echo "ERROR: SUSFS patch file 50_add_susfs_in_kernel-${{ inputs.kernel_version }}.patch not found in $GITHUB_WORKSPACE/susfs4ksu/kernel_patches/"
            exit 1
          fi
          cp "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/50_add_susfs_in_kernel-${{ inputs.kernel_version }}.patch" ./ 
          cp "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/fs/"* ./fs/ 
          cp "$GITHUB_WORKSPACE/susfs4ksu/kernel_patches/include/linux/"* ./include/linux/
          
          cd ./KernelSU-Next
          if [ "${{ inputs.ksun_branch }}" == "stable" ] || [ "${{ inputs.ksun_branch }}" == "next" ]; then
            echo "Applying next SUSFS patches to KernelSU-Next..."
            cp "$GITHUB_WORKSPACE/kernel_patches/next/0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch" ./ksun_susfs_latest.patch
            patch -p1 --forward < ksun_susfs_latest.patch || true
          fi
          
          case "${{ inputs.ksun_branch }}" in
            next|stable) BASE_VERSION=10200 ;;
            next-susfs|next-susfs-dev) BASE_VERSION=10198 ;;
            *) BASE_VERSION=10200 ;;
          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
          
          cd ../../ 
          patch -p1 < ./50_add_susfs_in_kernel-${{ inputs.kernel_version }}.patch || true

      - name: Apply KSUN Hooks
        run: |
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}" 
          echo "Applying KSUN Hooks..."
          cp "$GITHUB_WORKSPACE/kernel_patches/next/syscall_hooks.patch" ./
          patch -p1 --fuzz=3 < ./syscall_hooks.patch || true
          
      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"
          cp "$GITHUB_WORKSPACE/kernel_patches/69_hide_stuff.patch" .
          patch -p1 -F 3 < 69_hide_stuff.patch || true
          
      - name: Add KernelSU-Next and SUSFS Configuration Settings
        run: |
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"
          DEFCONFIG_PATH="./arch/arm64/configs/gki_defconfig"
          echo "Adding configuration settings to $DEFCONFIG_PATH..."
          
          if [ ! -f "$DEFCONFIG_PATH" ]; then
            echo "Warning: $DEFCONFIG_PATH not found. Attempting to create it."
            mkdir -p "$(dirname "$DEFCONFIG_PATH")"
            touch "$DEFCONFIG_PATH"
          fi

          cat <<EOF >> $DEFCONFIG_PATH
          CONFIG_KSU=y
          CONFIG_KSU_KPROBES_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          EOF

      - name: Add BBR Support (Optional TCP Congestion Control)
        # Using shell: bash for consistency with other multiline scripts
        shell: bash
        run: |
          set -e
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"
          DEFCONFIG_PATH="./arch/arm64/configs/gki_defconfig"
          
          # Ensure defconfig path exists before appending
          if [ ! -f "$DEFCONFIG_PATH" ]; then
            echo "Warning: $DEFCONFIG_PATH not found in BBR step. Skipping BBR config."
          else
            echo "Adding BBR configuration settings to $DEFCONFIG_PATH..."
            # Check if options already exist to avoid duplicates (optional, but good practice)
            grep -qxF "CONFIG_TCP_CONG_ADVANCED=y" "$DEFCONFIG_PATH" || echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$DEFCONFIG_PATH"
            grep -qxF "CONFIG_TCP_CONG_BBR=y" "$DEFCONFIG_PATH" || echo "CONFIG_TCP_CONG_BBR=y" >> "$DEFCONFIG_PATH"
            
            # For default, remove old default if it exists, then add new one
            sed -i '/CONFIG_DEFAULT_TCP_CONG=/d' "$DEFCONFIG_PATH"
            echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> "$DEFCONFIG_PATH"
            
            # Disable others (if they exist as =y, change to =n, otherwise add as =n)
            if grep -q "CONFIG_TCP_CONG_BIC=y" "$DEFCONFIG_PATH"; then
              sed -i 's/CONFIG_TCP_CONG_BIC=y/CONFIG_TCP_CONG_BIC=n/' "$DEFCONFIG_PATH"
            elif ! grep -q "CONFIG_TCP_CONG_BIC=" "$DEFCONFIG_PATH"; then
              echo "CONFIG_TCP_CONG_BIC=n" >> "$DEFCONFIG_PATH"
            fi
            
            if grep -q "CONFIG_TCP_CONG_WESTWOOD=y" "$DEFCONFIG_PATH"; then
              sed -i 's/CONFIG_TCP_CONG_WESTWOOD=y/CONFIG_TCP_CONG_WESTWOOD=n/' "$DEFCONFIG_PATH"
            elif ! grep -q "CONFIG_TCP_CONG_WESTWOOD=" "$DEFCONFIG_PATH"; then
              echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$DEFCONFIG_PATH"
            fi

            if grep -q "CONFIG_TCP_CONG_HTCP=y" "$DEFCONFIG_PATH"; then
              sed -i 's/CONFIG_TCP_CONG_HTCP=y/CONFIG_TCP_CONG_HTCP=n/' "$DEFCONFIG_PATH"
            elif ! grep -q "CONFIG_TCP_CONG_HTCP=" "$DEFCONFIG_PATH"; then
              echo "CONFIG_TCP_CONG_HTCP=n" >> "$DEFCONFIG_PATH"
            fi
            
            grep -qxF "CONFIG_NET_SCH_FQ=y" "$DEFCONFIG_PATH" || echo "CONFIG_NET_SCH_FQ=y" >> "$DEFCONFIG_PATH"
            grep -qxF "CONFIG_NET_SCH_FQ_CODEL=y" "$DEFCONFIG_PATH" || echo "CONFIG_NET_SCH_FQ_CODEL=y" >> "$DEFCONFIG_PATH"
            echo "BBR settings applied to $DEFCONFIG_PATH."
          fi
          
      - name: Add TTL Target Support (Optional Netfilter Feature)
        shell: bash # Use bash for consistency
        run: |
          set -e # Good practice to include
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"
          DEFCONFIG_PATH="./arch/arm64/configs/gki_defconfig"
          
          if [ ! -f "$DEFCONFIG_PATH" ]; then
            echo "Warning: $DEFCONFIG_PATH not found in TTL step. Skipping TTL config."
          else
            echo "Adding TTL target configuration settings to $DEFCONFIG_PATH..."
            # Use grep to add only if not already present, prevents duplicates
            grep -qxF "CONFIG_IP_NF_TARGET_TTL=y" "$DEFCONFIG_PATH" || echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$DEFCONFIG_PATH"
            grep -qxF "CONFIG_IP6_NF_TARGET_HL=y" "$DEFCONFIG_PATH" || echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$DEFCONFIG_PATH"
            grep -qxF "CONFIG_IP6_NF_MATCH_HL=y" "$DEFCONFIG_PATH" || echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$DEFCONFIG_PATH"
            echo "TTL Target settings applied to $DEFCONFIG_PATH."
          fi

      - name: Run sed and perl Commands
        # This is line 239 in the context of the error message
        shell: bash 
        run: |
          set -e 
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"

          DEFCONFIG_PATH="./arch/arm64/configs/gki_defconfig"
          echo "Running sed commands on $DEFCONFIG_PATH and scripts..."

          if [ -f "$DEFCONFIG_PATH" ]; then
            sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG_PATH"
            sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG_PATH"
            sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG_PATH"
          else
            echo "Warning: $DEFCONFIG_PATH not found for LTO sed, skipping."
          fi

          BUILD_CONFIG_GKI_PATH="./build.config.gki"
          if [ -f "$BUILD_CONFIG_GKI_PATH" ]; then sed -i 's/check_defconfig//' "$BUILD_CONFIG_GKI_PATH"; else echo "$BUILD_CONFIG_GKI_PATH not found, skipping."; fi

          SETLOCALVERSION_PATHS=( "./scripts/setlocalversion" "./msm-kernel/scripts/setlocalversion" "./external/dtc/scripts/setlocalversion" )
          for sl_path in "${SETLOCALVERSION_PATHS[@]}"; do
            if [ -f "$sl_path" ]; then
              echo "Modifying $sl_path..."
              sed -i '$s|echo "\$res"|echo "\$res-Wild"|' "$sl_path"
              sed -i 's/-dirty//' "$sl_path"
            else
              echo "$sl_path not found, skipping."
            fi
          done

          STAMP_BZL_PATH="./build/kernel/kleaf/impl/stamp.bzl"
          if [ -f "$STAMP_BZL_PATH" ]; then sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" "$STAMP_BZL_PATH"; else echo "$STAMP_BZL_PATH not found, skipping."; fi
          WORKSPACE_STAMP_PY_PATH="./build/kernel/kleaf/workspace_status_stamp.py"
          if [ -f "$WORKSPACE_STAMP_PY_PATH" ]; then sed -i 's/-dirty//' "$WORKSPACE_STAMP_PY_PATH"; else echo "$WORKSPACE_STAMP_PY_PATH not found, skipping."; fi
          
          OPLUS_SETUP_PATH="./oplus/build/oplus_setup.sh"
          if [ -f "$OPLUS_SETUP_PATH" ]; then
            sed -i '/echo "LTO $LTO "/i export LTO=thin' "$OPLUS_SETUP_PATH"
            sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' "$OPLUS_SETUP_PATH"
          else
            echo "$OPLUS_SETUP_PATH not found, skipping."
          fi
         
          DATESTR=$(date -u)
          MKCOMPILE_H_PATHS=( "./scripts/mkcompile_h" "./msm-kernel/scripts/mkcompile_h" )
          for mc_path in "${MKCOMPILE_H_PATHS[@]}"; do
            if [ -f "$mc_path" ]; then
              echo "Modifying UTS_VERSION in $mc_path..."
              perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT '"$DATESTR"'"}' "$mc_path"
            else
              echo "$mc_path not found, skipping."
            fi
          done
          echo "Sed/Perl script finished."

      - name: Setup Clang Toolchain (LineageOS Kernel Specific r416183b)
        run: |
          echo "Setting up Clang toolchain: LineageOS Kernel Specific r416183b..."
          # Define the specific Clang version/directory name based on the repo
          CLANG_REPO_URL="https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b.git"
          CLANG_DIR="$GITHUB_WORKSPACE/clang-r416183b" # Directory to clone into

          if [ ! -d "$CLANG_DIR/bin" ]; then
            echo "Clang r416183b not found locally, cloning from $CLANG_REPO_URL..."
            # Clone the entire repository, as it's version-specific. No specific branch needed usually.
            git clone "$CLANG_REPO_URL" "$CLANG_DIR" --depth=1
          else
            echo "Clang directory $CLANG_DIR/bin already exists."
          fi
          
          if [ ! -d "$CLANG_DIR/bin" ]; then
            echo "ERROR: Failed to clone or find Clang toolchain at $CLANG_DIR after attempting to clone $CLANG_REPO_URL"
            # Attempt a more generic Clang as a last resort (less ideal but better than nothing for some kernels)
            echo "Attempting fallback to a generic AOSP Clang (e.g., r450784e or similar)..."
            FALLBACK_CLANG_VERSION="r450784e" # Or another known stable AOSP Clang
            FALLBACK_CLANG_DIR="$GITHUB_WORKSPACE/clang-host-linux-x86-clang-${FALLBACK_CLANG_VERSION}"
            if [ ! -d "$FALLBACK_CLANG_DIR/bin" ]; then
                git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 "$FALLBACK_CLANG_DIR" --depth=1 -b "clang-${FALLBACK_CLANG_VERSION}" || true # Allow failure
            fi
            if [ -d "$FALLBACK_CLANG_DIR/bin" ]; then
                echo "Using fallback Clang: $FALLBACK_CLANG_DIR/bin"
                CLANG_DIR="$FALLBACK_CLANG_DIR" # Switch to fallback
            else
                echo "ERROR: Fallback Clang also failed to be set up."
                exit 1
            fi
          fi
          
          echo "$CLANG_DIR/bin" >> $GITHUB_PATH
          echo "LLVM=1" >> $GITHUB_ENV
          echo "LLVM_IAS=1" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          # For these kernel-specific Clang prebuilts, CROSS_COMPILE often points to its own binutils
          echo "CROSS_COMPILE=$CLANG_DIR/bin/aarch64-linux-gnu-" >> $GITHUB_ENV 
          echo "CROSS_COMPILE_ARM32=$CLANG_DIR/bin/arm-linux-gnueabi-" >> $GITHUB_ENV
          echo "Clang Path set to: $CLANG_DIR/bin"
          
          echo "Verifying Clang version..."
          ${CLANG_DIR}/bin/clang --version || echo "clang command not found or failed after setup!"
          
          echo "Listing $CLANG_DIR/bin to check for cross compilers:"
          ls -l "$CLANG_DIR/bin"

      - name: Build Kernel (using Make)
        env:
          KBUILD_BUILD_USER: ${{ github.actor }} # Using the GitHub actor name
          KBUILD_BUILD_HOST: "GitHubActions"   # Or any other desired host name
        run: |
          echo "Changing to kernel source directory: ${{ env.KERNEL_DIR }}..."
          cd "${{ env.KERNEL_DIR }}"

          KERNEL_BUILD_OUT_DIR="$(pwd)/out" 
          mkdir -p "$KERNEL_BUILD_OUT_DIR"

          echo "Building the kernel for SoC ${{ inputs.soc }} using make..."
          echo "Kernel source: $(pwd)"
          echo "Build output directory: $KERNEL_BUILD_OUT_DIR"
          echo "PATH: $PATH"
          echo "LLVM: $LLVM"
          echo "CLANG_TRIPLE: $CLANG_TRIPLE"
          echo "CROSS_COMPILE: $CROSS_COMPILE"
          echo "CROSS_COMPILE_ARM32: $CROSS_COMPILE_ARM32"
          
          MAKE_ARGS="-j$(nproc) O=$KERNEL_BUILD_OUT_DIR ARCH=arm64"
          if [ "$LLVM" == "1" ]; then
            MAKE_ARGS="$MAKE_ARGS LLVM=1 LLVM_IAS=1 CLANG_TRIPLE=$CLANG_TRIPLE CROSS_COMPILE=$CROSS_COMPILE CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32"
          fi
          
          echo "Applying defconfig: arch/arm64/configs/gki_defconfig with args: $MAKE_ARGS"
          make $MAKE_ARGS gki_defconfig
          
          # Build Image and dtbs (device tree blobs) separately
          echo "Starting kernel build (Image) with args: $MAKE_ARGS Image"
          make $MAKE_ARGS Image
          
          echo "Starting DTBS build with args: $MAKE_ARGS dtbs"
          make $MAKE_ARGS dtbs # This will create individual .dtb and .dtbo files
          
          echo "Build finished. Checking for artifacts in $KERNEL_BUILD_OUT_DIR..."
          echo "--- Kernel Image Location ---"
          ls -lh "$KERNEL_BUILD_OUT_DIR/arch/arm64/boot/Image"* 2>/dev/null || echo "Image or Image.gz not found directly in boot."
          
          echo "--- DTBS Output Location (Tree) ---"
          # The exact path for .dtbo files can vary. Adjust vendor/soc if needed.
          # More reliable to search within the output dts directory
          OUTPUT_DTS_DIR="$KERNEL_BUILD_OUT_DIR/arch/arm64/boot/dts"
          tree -L 5 "$OUTPUT_DTS_DIR/" || echo "Tree command failed or dts directory not structured as expected ($OUTPUT_DTS_DIR)."
          
          ARTIFACT_STAGING_DIR="$(dirname "$KERNEL_BUILD_OUT_DIR")/out_dist" # e.g. .../larry/out_dist
          mkdir -p "$ARTIFACT_STAGING_DIR" 
          echo "Staging artifacts for AnyKernel3 in: $ARTIFACT_STAGING_DIR"
          
          KERNEL_IMAGE_SRC="$KERNEL_BUILD_OUT_DIR/arch/arm64/boot/Image"
          if [ -f "$KERNEL_IMAGE_SRC" ]; then
            cp "$KERNEL_IMAGE_SRC" "$ARTIFACT_STAGING_DIR/Image"
            echo "Copied Image to $ARTIFACT_STAGING_DIR/Image"
          else
            KERNEL_IMAGE_GZ_SRC="$KERNEL_BUILD_OUT_DIR/arch/arm64/boot/Image.gz"
            if [ -f "$KERNEL_IMAGE_GZ_SRC" ]; then
                gunzip -c "$KERNEL_IMAGE_GZ_SRC" > "$ARTIFACT_STAGING_DIR/Image"
                echo "Copied and uncompressed Image.gz to $ARTIFACT_STAGING_DIR/Image"
            else
                echo "ERROR: Neither Image ($KERNEL_IMAGE_SRC) nor Image.gz ($KERNEL_IMAGE_GZ_SRC) found!"
                exit 1
            fi
          fi
          
          # --- dtbo.img creation ---
          MKDTIMG_PATH="/usr/bin/mkdtimg" 
          if ! command -v mkdtimg &> /dev/null; then
             if [ -f "$GITHUB_WORKSPACE/tools/mkdtimg" ]; then # Check for mkdtimg in workspace/tools
                MKDTIMG_PATH="$GITHUB_WORKSPACE/tools/mkdtimg"
                chmod +x "$MKDTIMG_PATH"
                echo "Using mkdtimg from $GITHUB_WORKSPACE/tools/mkdtimg"
             else
                echo "WARNING: mkdtimg command not found system-wide or in $GITHUB_WORKSPACE/tools/. Cannot create dtbo.img from individual .dtbo files."
                MKDTIMG_PATH="" 
             fi
          else
            echo "Using system mkdtimg: $MKDTIMG_PATH"
          fi
          
          # Search for .dtbo files within the output dts directory.
          # Adjust the -path argument if your .dtbo files are in a specific subfolder (e.g., vendor/qcom or ${{ inputs.soc }})
          # For a generic search within the output dts path:
          DTBO_FILES_FOUND=$(find "$OUTPUT_DTS_DIR" -name "*.dtbo" -print)

          if [ -n "$MKDTIMG_PATH" ] && [ -n "$DTBO_FILES_FOUND" ]; then
            echo "Found .dtbo files. Attempting to create dtbo.img using $MKDTIMG_PATH..."
            # Create a space-separated list of .dtbo files.
            DTBO_ARGS=$(echo "$DTBO_FILES_FOUND" | tr '\n' ' ')
            # DTBO_ARGS=$(find "$OUTPUT_DTS_DIR/" -name "*.dtbo" -print | tr '\n' ' ') # Simpler find if no complex path filtering needed

            if [ -n "$DTBO_ARGS" ]; then
                echo "Running: $MKDTIMG_PATH create $ARTIFACT_STAGING_DIR/dtbo.img $DTBO_ARGS"
                "$MKDTIMG_PATH" create "$ARTIFACT_STAGING_DIR/dtbo.img" $DTBO_ARGS
                if [ -f "$ARTIFACT_STAGING_DIR/dtbo.img" ]; then
                    echo "Successfully created $ARTIFACT_STAGING_DIR/dtbo.img"
                else
                    echo "ERROR: Failed to create dtbo.img using mkdtimg."
                fi
            else
                echo "WARNING: No .dtbo files found by find command for mkdtimg arguments within $OUTPUT_DTS_DIR."
            fi
          elif [ -n "$DTBO_FILES_FOUND" ]; then
            echo "WARNING: .dtbo files were found, but mkdtimg tool is not available. dtbo.img will not be created."
          else
            echo "INFO: No .dtbo files found in $OUTPUT_DTS_DIR or mkdtimg not available. Skipping dtbo.img creation from individual files."
          fi
          
          # Fallback: Check if a pre-existing dtbo.img was somehow created by 'make dtbs' or is in a standard output location
          if [ ! -f "$ARTIFACT_STAGING_DIR/dtbo.img" ]; then
            echo "dtbo.img not created by mkdtimg, checking for pre-existing dtbo.img..."
            DTBO_PREBUILT_PATHS=(
              "$KERNEL_BUILD_OUT_DIR/arch/arm64/boot/dtbo.img" 
              "$KERNEL_BUILD_OUT_DIR/dtbo.img" # Some very custom setups might output here
            )
            for dtbo_path_try in "${DTBO_PREBUILT_PATHS[@]}"; do
              if [ -f "$dtbo_path_try" ]; then
                cp "$dtbo_path_try" "$ARTIFACT_STAGING_DIR/dtbo.img"
                echo "Copied pre-existing dtbo.img from $dtbo_path_try to $ARTIFACT_STAGING_DIR/dtbo.img"
                break
              fi
            done
          fi
          
          if [ ! -f "$ARTIFACT_STAGING_DIR/dtbo.img" ]; then
            echo "FINAL WARNING: dtbo.img was not found or created in $ARTIFACT_STAGING_DIR."
          fi
      
      - name: Copy Images to AnyKernel3
        run: |
          ARTIFACT_SOURCE_DIR="$GITHUB_WORKSPACE/${{ env.CONFIG_VAR_NAME }}/out_dist"
          ANYKERNEL_DIR="$GITHUB_WORKSPACE/AnyKernel3"

          echo "Source artifact directory: $ARTIFACT_SOURCE_DIR"
          echo "Target AnyKernel3 directory: $ANYKERNEL_DIR"

          if [ ! -d "$ARTIFACT_SOURCE_DIR" ]; then echo "ERROR: Artifact staging directory $ARTIFACT_SOURCE_DIR not found."; exit 1; fi
          if [ ! -f "$ARTIFACT_SOURCE_DIR/Image" ]; then echo "ERROR: $ARTIFACT_SOURCE_DIR/Image not found."; exit 1; fi

          echo "Copying Images to $ANYKERNEL_DIR..."
          cp "$ARTIFACT_SOURCE_DIR/Image" "$ANYKERNEL_DIR/Image"
          
          if [ "${{ inputs.model }}" == "OPAce5Pro" ]; then
            if [ -f "$ARTIFACT_SOURCE_DIR/dtbo.img" ]; then cp "$ARTIFACT_SOURCE_DIR/dtbo.img" "$ANYKERNEL_DIR/"; else echo "Warning: dtbo.img not found for OPAce5Pro in $ARTIFACT_SOURCE_DIR"; fi
          elif [ "${{ inputs.model }}" == "larry" ]; then
            echo "Copying images for larry (OnePlus Nord CE 3 Lite 5G)"
            if [ -f "$ARTIFACT_SOURCE_DIR/dtbo.img" ]; then cp "$ARTIFACT_SOURCE_DIR/dtbo.img" "$ANYKERNEL_DIR/dtbo.img"; else echo "Warning: dtbo.img not found for larry in $ARTIFACT_SOURCE_DIR"; fi
            if [ -f "$ARTIFACT_SOURCE_DIR/vendor_boot.img" ]; then cp "$ARTIFACT_SOURCE_DIR/vendor_boot.img" "$ANYKERNEL_DIR/vendor_boot.img"; echo "Copied vendor_boot.img"; fi
            if [ -f "$ARTIFACT_SOURCE_DIR/vendor_dlkm.img" ]; then cp "$ARTIFACT_SOURCE_DIR/vendor_dlkm.img" "$ANYKERNEL_DIR/vendor_dlkm.img"; echo "Copied vendor_dlkm.img"; fi
            if [ ! -f "$ARTIFACT_SOURCE_DIR/vendor_boot.img" ] && [ ! -f "$ARTIFACT_SOURCE_DIR/vendor_dlkm.img" ]; then echo "Info: Neither vendor_boot.img nor vendor_dlkm.img found (expected)."; fi
          fi

      - name: Create ZIP Files for Different Formats
        run: |
          ANYKERNEL_DIR="$GITHUB_WORKSPACE/AnyKernel3"
          echo "Navigating to AnyKernel3 directory: $ANYKERNEL_DIR"
          cd "$ANYKERNEL_DIR"
          
          ZIP_NAME="${{ inputs.model }}_A${{ inputs.android_version }}_K${{ inputs.kernel_version }}_KSUNext_${{ env.KSUVER }}_SUSFS_AnyKernel3.zip"
          echo "Creating zip file ../$ZIP_NAME from $(pwd)..."
          zip -r9 "../$ZIP_NAME" ./* -x ".git/*" -x ".github/*" -x "__MACOSX"
          
          if [ "${{ inputs.model }}" == "OPAce5Pro" ]; then
            echo "Applying OPAce5Pro specific modifications for CN version..."
            if [ ! -f "./dtbo.img" ]; then
                echo "Warning: dtbo.img not found in AnyKernel3 for OPAce5Pro CN version. Skipping."
            else
                mkdir -p ../cn_zip_temp 
                cp -r ./* ../cn_zip_temp/
                sed -i 's/hmbird/xxbird/g' ../cn_zip_temp/dtbo.img
                (cd ../cn_zip_temp && zip -r9 "../../${ZIP_NAME%.zip}-CN-version.zip" ./* -x ".git/*" -x ".github/*" -x "__MACOSX")
                rm -rf ../cn_zip_temp
            fi
          fi
          cd "$GITHUB_WORKSPACE" 
          echo "Listing ZIP files in $GITHUB_WORKSPACE:"
          ls -alh *.zip

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG_VAR_NAME }}-${{ inputs.android_version }}-${{ env.KSUVER }}
          path: |
            *.zip 
          if-no-files-found: error
