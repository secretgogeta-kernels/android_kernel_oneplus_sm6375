name: Build OnePlus SM6375 Kernel with GCC

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main # Or your default branch where this workflow file resides
    paths:
      - '.github/workflows/build.yml' # Rebuild if workflow changes

jobs:
  build_kernel:
    name: Build Kernel with GCC
    runs-on: ubuntu-latest
    permissions:
      contents: write # To allow creating releases or pushing artifacts (optional)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ccache curl flex \
            git imagemagick libncurses5-dev libssl-dev \
            make rsync unzip wget zip kmod \
            software-properties-common

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12 # Adjust as needed, compilation can be memory intensive

      - name: Prepare Toolchain and Sources
        run: |
          mkdir -p "${HOME}/toolchains"
          export KERNEL_DIR="${PWD}/kernel_source"
          export ANYKERNEL_DIR="${PWD}/anykernel3"
          export GCC64_TOOLCHAIN_DIR="${HOME}/toolchains/gcc-aarch64-linux-android-4.9"
          export GCC32_TOOLCHAIN_DIR="${HOME}/toolchains/gcc-arm-linux-androideabi-4.9"

          echo "KERNEL_DIR=${KERNEL_DIR}" >> $GITHUB_ENV
          echo "ANYKERNEL_DIR=${ANYKERNEL_DIR}" >> $GITHUB_ENV
          echo "GCC64_TOOLCHAIN_DIR=${GCC64_TOOLCHAIN_DIR}" >> $GITHUB_ENV
          echo "GCC32_TOOLCHAIN_DIR=${GCC32_TOOLCHAIN_DIR}" >> $GITHUB_ENV

          # Clone Kernel Source
          git clone --depth=1 -b lineage-22.2 https://github.com/Teamhackneyed/android_kernel_oneplus_sm6375 "${KERNEL_DIR}"

          # Clone AnyKernel3
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git "${ANYKERNEL_DIR}"

          # Clone LineageOS GCC aarch64 toolchain
          echo "Cloning GCC aarch64 toolchain..."
          git clone --depth=1 -b lineage-19.1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git "${GCC64_TOOLCHAIN_DIR}"

          # Clone LineageOS GCC arm toolchain (for arm32 cross-compile)
          echo "Cloning GCC arm toolchain..."
          git clone --depth=1 -b lineage-19.1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git "${GCC32_TOOLCHAIN_DIR}"

          # Add toolchains to PATH
          echo "${GCC64_TOOLCHAIN_DIR}/bin" >> $GITHUB_PATH
          echo "${GCC32_TOOLCHAIN_DIR}/bin" >> $GITHUB_PATH
          echo "PATH=${GCC64_TOOLCHAIN_DIR}/bin:${GCC32_TOOLCHAIN_DIR}/bin:${PATH}" >> $GITHUB_ENV

      - name: Compile Kernel
        run: |
          cd "${KERNEL_DIR}"
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="YourGitHubUsername" # Change this
          export KBUILD_BUILD_HOST="GitHubActions"
          export DEFCONFIG=gki_defconfig
          export KERNEL_IMAGE_NAME=Image # GKI typically outputs 'Image'

          # Set CROSS_COMPILE paths using the environment variables set earlier
          export CROSS_COMPILE="${GCC64_TOOLCHAIN_DIR}/bin/aarch64-linux-android-"
          export CROSS_COMPILE_ARM32="${GCC32_TOOLCHAIN_DIR}/bin/arm-linux-androideabi-"

          export KBUILD_COMPILER_STRING="$(${CROSS_COMPILE}gcc --version | head -n 1)"

          # Verify GCC is found
          which aarch64-linux-android-gcc
          aarch64-linux-android-gcc --version
          which arm-linux-androideabi-gcc
          arm-linux-androideabi-gcc --version

          echo "Starting kernel compilation..."
          echo "Using GCC: $(${CROSS_COMPILE}gcc --version | head -n 1)"

          make -j$(nproc --all) O=out \
            ARCH=${ARCH} \
            SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32} \
            ${DEFCONFIG}

          make -j$(nproc --all) O=out \
            ARCH=${ARCH} \
            SUBARCH=${SUBARCH} \
            CROSS_COMPILE=${CROSS_COMPILE} \
            CROSS_COMPILE_ARM32=${CROSS_COMPILE_ARM32}

          echo "Kernel compilation finished."
          ls -lh "${KERNEL_DIR}/out/arch/arm64/boot/"

      - name: Package with AnyKernel3
        run: |
          cd "${ANYKERNEL_DIR}"
          export KERNEL_IMAGE_PATH="${KERNEL_DIR}/out/arch/arm64/boot/Image" # Adjust if your kernel outputs something else like Image.gz

          if [ ! -f "${KERNEL_IMAGE_PATH}" ]; then
            echo "Kernel image not found at ${KERNEL_IMAGE_PATH}!"
            exit 1
          fi

          # Copy kernel image to AnyKernel3 directory
          cp "${KERNEL_IMAGE_PATH}" .

          # Optional: Update anykernel.sh if needed
          # sed -i 's/kernel.string=.*/kernel.string=MyCustomKernel-GCC by YourName/' anykernel.sh

          # Create ZIP file
          export ZIP_NAME="SM6375_Kernel_GCC_$(date +%Y%m%d-%H%M).zip"
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV

          zip -r9 "${ZIP_NAME}" * -x ".git*" "*placeholder" "LICENSE" "README.md"
          echo "Flashable ZIP created: ${ZIP_NAME}"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ANYKERNEL_DIR }}/${{ env.ZIP_NAME }}

      - name: Upload Kernel Image (for debugging)
        if: success() # Only if previous steps succeeded
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_Image_GCC
          path: ${{ env.KERNEL_DIR }}/out/arch/arm64/boot/Image
