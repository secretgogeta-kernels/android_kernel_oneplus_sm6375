name: Build Kernel

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main # Or your default branch where this workflow file resides
    paths:
      - '.github/workflows/build.yml' # Rebuild if workflow changes
# Define the jobs to be executed
jobs:
  build:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    # Steps to perform in the job
    steps:
      # Step 1: Checkout the kernel source repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: lineage-22.2

      # Step 2: Install build dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libssl-dev libelf-dev gcc-aarch64-linux-gnu clang

      # Step 3: Compile the kernel
      - name: Compile kernel
        run: |
          export ARCH=arm64
          export CLANG_TRIPLE=aarch64-linux-gnu-
          make gki_defconfig
          make -j$(nproc) CC=clang HOSTCC=clang

      # Step 4: Clone AnyKernel3 repository
      - name: Clone AnyKernel3
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git

      # Step 5: Set up AnyKernel3 with the compiled kernel
      - name: Set up AnyKernel3
        run: |
          cp arch/arm64/boot/Image.gz AnyKernel3/
          # Set the device name in anykernel.sh (assuming codename is oneplus_sm6375)
          sed -i 's/device.name1=/device.name1=oneplus_sm6375/' AnyKernel3/anykernel.sh

      # Step 6: Create the flashable zip
      - name: Create flashable zip
        run: |
          cd AnyKernel3
          zip -r9 ../kernel.zip *

      # Step 7: Upload the zip as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel
          path: kernel.zip
