name: Kernel Build and Deployment

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y git-core gnupg flex bison build-essential zip curl zlib1g-dev \
          libc6-dev-i386 x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev \
          libxml2-utils xsltproc unzip fontconfig repo libssl-dev android-sdk-platform-tools \
          bc rsync kmod cpio ccache

    - name: Build Kernel
      run: |
        #!/bin/bash
        set -e
        
        # Build variables
        BUILD_ROOT_DIR=$(pwd)
        KERNEL_SOURCE_DIR="android_kernel_oneplus_sm6375"
        CLANG_REPO_DIR="android_prebuilts_clang_kernel_linux-x86_clang-r416183b"
        GCC64_REPO_DIR="android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9"
        GCC32_REPO_DIR="android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9"
        ANYKERNEL_DEVICE_CODENAME1="larry"
        KERNEL_NAME_PREFIX="LarryKernel-SM6375"
        DEFCONFIG_KERNEL_PATH="vendor/holi-qgki_defconfig"
        SUSFS_REPO_DIR="susfs4ksu"
        
        # Clone main repositories
        git clone --depth=1 https://github.com/LineageOS/android_kernel_oneplus_sm6375 $KERNEL_SOURCE_DIR
        git clone --depth=1 https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b $CLANG_REPO_DIR
        git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 $GCC64_REPO_DIR
        git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 $GCC32_REPO_DIR

        # Clone and integrate SuSFS
        git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git $SUSFS_REPO_DIR
        (cd $KERNEL_SOURCE_DIR && curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -)
        
        # Copy SuSFS patches
        cp $SUSFS_REPO_DIR/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch $KERNEL_SOURCE_DIR/KernelSU-Next/
        SUSFS_KERNEL_PATCH=$SUSFS_REPO_DIR/kernel_patches/50_add_susfs_in_kernel-5.4.patch
        cp $SUSFS_KERNEL_PATCH $BUILD_ROOT_DIR/$KERNEL_SOURCE_DIR/
        rsync -a $SUSFS_REPO_DIR/kernel_patches/fs/ $BUILD_ROOT_DIR/$KERNEL_SOURCE_DIR/fs/
        rsync -a $SUSFS_REPO_DIR/kernel_patches/include/linux/ $BUILD_ROOT_DIR/$KERNEL_SOURCE_DIR/include/linux/

        # Apply patches with error handling
        (cd $KERNEL_SOURCE_DIR/KernelSU-Next && patch -p1 < 10_enable_susfs_for_ksu.patch)
        
        # Apply kernel patch with fuzz factor to handle offsets
        echo "Applying kernel patch with fuzz factor..."
        (cd $BUILD_ROOT_DIR/$KERNEL_SOURCE_DIR && patch -p1 -F 3 < $(basename $SUSFS_KERNEL_PATCH) || {
            echo "Patch application failed, attempting manual resolution"
            # Handle specific known failure
            if [ -f "fs/proc/task_mmu.c.rej" ]; then
                echo "Detected task_mmu.c patch failure - applying manual fix"
                # Add manual patch adjustments here if needed
            fi
            # Fail build if critical patches didn't apply
            exit 1
        })

        # Configure kernel
        echo -e "\n# KernelSU and SuSFS Configuration" >> $KERNEL_SOURCE_DIR/arch/arm64/configs/$DEFCONFIG_KERNEL_PATH
        cat <<EOF >> $KERNEL_SOURCE_DIR/arch/arm64/configs/$DEFCONFIG_KERNEL_PATH
        CONFIG_KSU=y
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_SUS_SU=y
        EOF

        # Set up build environment
        export CLANG_DIR="$BUILD_ROOT_DIR/$CLANG_REPO_DIR/bin"
        export GCC64_DIR="$BUILD_ROOT_DIR/$GCC64_REPO_DIR/bin"
        export GCC_DIR="$BUILD_ROOT_DIR/$GCC32_REPO_DIR/bin"
        export PATH="$CLANG_DIR:$GCC64_DIR:$GCC_DIR:$PATH"
        export KBUILD_BUILD_HOST="GitHub-Actions"
        export KBUILD_BUILD_USER="github"
        
        # Build kernel
        cd $KERNEL_SOURCE_DIR
        make O=out ARCH=arm64 mrproper
        make O=out ARCH=arm64 $DEFCONFIG_KERNEL_PATH
        yes '' | make O=out ARCH=arm64 olddefconfig
        
        BUILD_LOG_FILE="$BUILD_ROOT_DIR/build.log"
        make -j$(nproc --all) \
          CC=clang \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          CROSS_COMPILE_ARM32=arm-linux-androideabi- \
          O=out \
          ARCH=arm64 2>&1 | tee $BUILD_LOG_FILE
        
        # Prepare artifacts
        KERNEL_IMAGE_PATH="$BUILD_ROOT_DIR/$KERNEL_SOURCE_DIR/out/arch/arm64/boot/Image"
        [ -f "$KERNEL_IMAGE_PATH" ] && cp $KERNEL_IMAGE_PATH $BUILD_ROOT_DIR/Image
        
        git clone --depth 1 https://github.com/osm0sis/AnyKernel3
        cp $KERNEL_IMAGE_PATH AnyKernel3/Image
        cd AnyKernel3
        sed -i "s/kernel.string=.*/kernel.string=${KERNEL_NAME_PREFIX}-$(date +%Y%m%d)-KSU/;
                s/do.devicecheck=.*/do.devicecheck=1/;
                s/device.name1=.*/device.name1=${ANYKERNEL_DEVICE_CODENAME1}/" anykernel.sh
        ZIP_NAME="${KERNEL_NAME_PREFIX}-KSU-$(date +%Y%m%d).zip"
        zip -r9 $ZIP_NAME *
        mv $ZIP_NAME $BUILD_ROOT_DIR/
        cd $BUILD_ROOT_DIR

        # Prepare artifacts for upload
        mkdir -p artifacts
        [ -f build.log ] && mv build.log artifacts/
        [ -f Image ] && mv Image artifacts/
        [ -f $ZIP_NAME ] && mv $ZIP_NAME artifacts/

      shell: bash

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-artifacts
        path: artifacts/
