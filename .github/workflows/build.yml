name: Kernel Builder

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-kernel:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: Teamhackneyed/android_kernel_oneplus_sm6375
        path: kernel
        clean: true
        fetch-depth: 1  # Usar fetch-depth:1 para economizar espaço

    - name: Remove Git History
      run: |
        # Remover completamente o histórico do Git para evitar detecção de "dirty tree"
        rm -rf kernel/.git

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libssl-dev libncurses-dev \
          bison flex bc rsync kmod cpio python3 \
          clang llvm lld libelf-dev git wget zip

    - name: Setup Toolchains
      run: |
        # Baixar Clang diretamente para um diretório temporário
        mkdir clang_temp
        wget -q https://github.com/ZyCromerZ/Clang/releases/download/21.0.0git-20250617-release/Clang-21.0.0git-20250617.tar.gz -O clang_temp/clang.tar.gz
        tar -xzf clang_temp/clang.tar.gz -C clang_temp
        mkdir -p kernel/clang
        mv clang_temp/* kernel/clang/
        rm -rf clang_temp

        # Instalar GCC
        git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-gnu-9.3 kernel/gcc

    - name: Download Config
      run: |
        wget https://github.com/secretgogeta-kernels/android_kernel_oneplus_sm6375/releases/download/A/config.gz -O kernel/config.gz
        gunzip -c kernel/config.gz > kernel/.config

    - name: Prepare Build Environment
      run: |
        cd kernel
        
        # Solução definitiva para o erro "source tree not clean"
        # 1. Criar um build directory completamente isolado
        rm -rf ../kernel_build
        cp -a . ../kernel_build
        
        # 2. Trabalhar na cópia limpa
        cd ../kernel_build
        
        # 3. Configurar toolchains
        export CLANG_PATH=$(pwd)/clang/bin
        export GCC_PATH=$(pwd)/gcc/bin
        export PATH=$CLANG_PATH:$GCC_PATH:$PATH
        
        # 4. Criar diretório de output
        mkdir -p out
        
        # 5. Copiar configuração
        cp .config out/.config
        
        # 6. Executar configuração inicial
        make ARCH=arm64 O=out CC=clang \
            CROSS_COMPILE=aarch64-linux-gnu- \
            oldconfig </dev/null

    - name: Build Kernel
      run: |
        cd kernel_build
        export CLANG_PATH=$(pwd)/clang/bin
        export GCC_PATH=$(pwd)/gcc/bin
        export PATH=$CLANG_PATH:$GCC_PATH:$PATH
        
        # Compilar com todas as flags necessárias
        make -j$(nproc) ARCH=arm64 O=out CC=clang \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="-fno-pie" \
            KBUILD_BUILD_USER=CI \
            KBUILD_BUILD_HOST=GitHubActions

    - name: Setup AnyKernel3
      run: |
        git clone https://github.com/osm0sis/AnyKernel3
        mkdir -p AnyKernel3/dtbs
        
        # Copiar artefatos de compilação
        cp kernel_build/out/arch/arm64/boot/Image.gz AnyKernel3/
        cp kernel_build/out/arch/arm64/boot/dts/vendor/*.dtb AnyKernel3/dtbs/ 2>/dev/null || true

    - name: Create Flashable Zip
      run: |
        cd AnyKernel3
        zip -r9 kernel.zip *
        mv kernel.zip ../

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build
        path: |
          kernel.zip
          kernel_build/out/arch/arm64/boot/Image.gz
